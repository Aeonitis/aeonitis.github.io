{"ast":null,"code":"import html2canvas from 'html2canvas';\nimport { saveAs } from 'file-saver';\n\n/**\n * Export the argument map as a PNG image\n * @param {HTMLElement} element - The DOM element to capture\n * @param {string} fileName - The file name for the exported image\n */\nexport const exportToImage = async (element, fileName) => {\n  try {\n    // Temporarily adjust styles for better export quality\n    const nodes = element.querySelectorAll('.react-flow__node');\n    const edges = element.querySelectorAll('.react-flow__edge');\n    const originalNodeStyles = [];\n    const originalEdgeStyles = [];\n\n    // Enhance node appearance for export\n    nodes.forEach(node => {\n      originalNodeStyles.push({\n        element: node,\n        boxShadow: node.style.boxShadow,\n        border: node.style.border\n      });\n\n      // Enhance shadows and borders for the export\n      node.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n      node.style.border = '2px solid #e0e0e0';\n    });\n\n    // Enhance edge appearance for export\n    edges.forEach(edge => {\n      originalEdgeStyles.push({\n        element: edge,\n        strokeWidth: edge.style.strokeWidth\n      });\n\n      // Make edges more visible\n      const paths = edge.querySelectorAll('path');\n      paths.forEach(path => {\n        path.setAttribute('stroke-width', '2');\n      });\n    });\n\n    // Create canvas from the element\n    const canvas = await html2canvas(element, {\n      backgroundColor: '#f8f8f8',\n      scale: 2,\n      // Higher scale for better quality\n      logging: false,\n      useCORS: true\n    });\n\n    // Add logo watermark\n    const ctx = canvas.getContext('2d');\n    const logo = new Image();\n\n    // Wait for logo to load\n    await new Promise((resolve, reject) => {\n      logo.onload = resolve;\n      logo.onerror = reject;\n      logo.src = '/logo.png'; // Path to your logo in public folder\n    }).catch(err => {\n      console.error('Failed to load logo for watermark:', err);\n      // Continue without watermark if logo fails to load\n    });\n\n    // If logo loaded successfully, draw it\n    if (logo.complete && logo.naturalHeight !== 0) {\n      // Position in bottom right with padding\n      const padding = 20;\n      const maxSize = 100; // Max size for the logo\n      const logoWidth = Math.min(logo.width, maxSize);\n      const logoHeight = Math.min(logo.height, maxSize);\n      const ratio = Math.min(logoWidth / logo.width, logoHeight / logo.height);\n      const scaledWidth = logo.width * ratio;\n      const scaledHeight = logo.height * ratio;\n\n      // Draw logo in bottom right corner\n      ctx.globalAlpha = 0.6; // Make logo semi-transparent\n      ctx.drawImage(logo, canvas.width - scaledWidth - padding, canvas.height - scaledHeight - padding, scaledWidth, scaledHeight);\n      ctx.globalAlpha = 1.0;\n\n      // Add version number near the logo\n      ctx.font = '12px Roboto, Arial, sans-serif';\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n      const version = 'v0.0.10'; // TODO: Get this from config.js\n      const versionWidth = ctx.measureText(version).width;\n      ctx.fillText(version, canvas.width - versionWidth - padding, canvas.height - padding + 5);\n    }\n\n    // Convert to blob and save\n    canvas.toBlob(blob => {\n      saveAs(blob, fileName);\n    });\n\n    // Restore original styles\n    originalNodeStyles.forEach(({\n      element,\n      boxShadow,\n      border\n    }) => {\n      element.style.boxShadow = boxShadow;\n      element.style.border = border;\n    });\n    originalEdgeStyles.forEach(({\n      element,\n      strokeWidth\n    }) => {\n      const paths = element.querySelectorAll('path');\n      paths.forEach(path => {\n        path.setAttribute('stroke-width', strokeWidth || '1');\n      });\n    });\n  } catch (error) {\n    console.error('Error exporting image:', error);\n    alert('Failed to export image. Please try again.');\n  }\n};\n\n/**\n * Export the argument map as a .trie file (JSON format)\n * @param {Object} mapData - The map data to export\n * @param {string} fileName - The file name for the exported file\n */\nexport const exportToTrie = (mapData, fileName) => {\n  try {\n    // Create a new object with only the necessary data\n    const exportData = {\n      version: '0.0.10',\n      timestamp: new Date().toISOString(),\n      nodes: mapData.nodes.map(node => ({\n        id: node.id,\n        position: node.position,\n        data: {\n          label: node.data.label,\n          type: node.data.type\n        }\n      })),\n      edges: mapData.edges.map(edge => ({\n        id: edge.id,\n        source: edge.source,\n        target: edge.target\n      })),\n      styles: mapData.styles || {}\n    };\n\n    // Convert to JSON string\n    const jsonString = JSON.stringify(exportData, null, 2);\n\n    // Create blob and save\n    const blob = new Blob([jsonString], {\n      type: 'application/json'\n    });\n    saveAs(blob, fileName);\n  } catch (error) {\n    console.error('Error exporting .trie file:', error);\n    alert('Failed to export file. Please try again.');\n  }\n};\n\n/**\n * Import an argument map from a .trie file\n * @param {File} file - The .trie file to import\n * @returns {Promise<Object>} The imported map data\n */\nexport const importFromTrie = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = event => {\n      try {\n        const importData = JSON.parse(event.target.result);\n\n        // Validate the format\n        if (!importData.nodes || !importData.edges) {\n          throw new Error('Invalid .trie file format');\n        }\n\n        // Process nodes to ensure they have the correct structure\n        const nodes = importData.nodes.map(node => ({\n          id: node.id,\n          type: 'default',\n          // Ensure we're using the custom node type\n          position: node.position,\n          data: {\n            label: node.data.label,\n            type: node.data.type\n          }\n        }));\n\n        // Process edges\n        const edges = importData.edges.map(edge => ({\n          id: edge.id,\n          source: edge.source,\n          target: edge.target,\n          type: 'default',\n          markerEnd: {\n            type: 'arrowclosed'\n          }\n        }));\n\n        // If styles are included, we could apply them here\n        if (importData.styles) {\n          // This would be handled by the AppContext\n          localStorage.setItem('arg-map-node-styles', JSON.stringify(importData.styles));\n        }\n        resolve({\n          nodes,\n          edges,\n          styles: importData.styles\n        });\n      } catch (error) {\n        console.error('Error parsing .trie file:', error);\n        reject(new Error('Failed to parse file. Make sure it is a valid .trie file.'));\n      }\n    };\n    reader.onerror = () => {\n      reject(new Error('Error reading the file.'));\n    };\n    reader.readAsText(file);\n  });\n};","map":{"version":3,"names":["html2canvas","saveAs","exportToImage","element","fileName","nodes","querySelectorAll","edges","originalNodeStyles","originalEdgeStyles","forEach","node","push","boxShadow","style","border","edge","strokeWidth","paths","path","setAttribute","canvas","backgroundColor","scale","logging","useCORS","ctx","getContext","logo","Image","Promise","resolve","reject","onload","onerror","src","catch","err","console","error","complete","naturalHeight","padding","maxSize","logoWidth","Math","min","width","logoHeight","height","ratio","scaledWidth","scaledHeight","globalAlpha","drawImage","font","fillStyle","version","versionWidth","measureText","fillText","toBlob","blob","alert","exportToTrie","mapData","exportData","timestamp","Date","toISOString","map","id","position","data","label","type","source","target","styles","jsonString","JSON","stringify","Blob","importFromTrie","file","reader","FileReader","event","importData","parse","result","Error","markerEnd","localStorage","setItem","readAsText"],"sources":["/Users/aeonitis/dev/wip/n/aeonitis.github.io/src/utils/exportUtils.js"],"sourcesContent":["import html2canvas from 'html2canvas';\nimport { saveAs } from 'file-saver';\n\n/**\n * Export the argument map as a PNG image\n * @param {HTMLElement} element - The DOM element to capture\n * @param {string} fileName - The file name for the exported image\n */\nexport const exportToImage = async (element, fileName) => {\n  try {\n    // Temporarily adjust styles for better export quality\n    const nodes = element.querySelectorAll('.react-flow__node');\n    const edges = element.querySelectorAll('.react-flow__edge');\n    const originalNodeStyles = [];\n    const originalEdgeStyles = [];\n\n    // Enhance node appearance for export\n    nodes.forEach(node => {\n      originalNodeStyles.push({\n        element: node,\n        boxShadow: node.style.boxShadow,\n        border: node.style.border\n      });\n      \n      // Enhance shadows and borders for the export\n      node.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';\n      node.style.border = '2px solid #e0e0e0';\n    });\n\n    // Enhance edge appearance for export\n    edges.forEach(edge => {\n      originalEdgeStyles.push({\n        element: edge,\n        strokeWidth: edge.style.strokeWidth\n      });\n      \n      // Make edges more visible\n      const paths = edge.querySelectorAll('path');\n      paths.forEach(path => {\n        path.setAttribute('stroke-width', '2');\n      });\n    });\n\n    // Create canvas from the element\n    const canvas = await html2canvas(element, {\n      backgroundColor: '#f8f8f8',\n      scale: 2, // Higher scale for better quality\n      logging: false,\n      useCORS: true\n    });\n\n    // Add logo watermark\n    const ctx = canvas.getContext('2d');\n    const logo = new Image();\n    \n    // Wait for logo to load\n    await new Promise((resolve, reject) => {\n      logo.onload = resolve;\n      logo.onerror = reject;\n      logo.src = '/logo.png'; // Path to your logo in public folder\n    }).catch(err => {\n      console.error('Failed to load logo for watermark:', err);\n      // Continue without watermark if logo fails to load\n    });\n\n    // If logo loaded successfully, draw it\n    if (logo.complete && logo.naturalHeight !== 0) {\n      // Position in bottom right with padding\n      const padding = 20;\n      const maxSize = 100; // Max size for the logo\n      const logoWidth = Math.min(logo.width, maxSize);\n      const logoHeight = Math.min(logo.height, maxSize);\n      const ratio = Math.min(logoWidth / logo.width, logoHeight / logo.height);\n      const scaledWidth = logo.width * ratio;\n      const scaledHeight = logo.height * ratio;\n      \n      // Draw logo in bottom right corner\n      ctx.globalAlpha = 0.6; // Make logo semi-transparent\n      ctx.drawImage(\n        logo,\n        canvas.width - scaledWidth - padding,\n        canvas.height - scaledHeight - padding,\n        scaledWidth,\n        scaledHeight\n      );\n      ctx.globalAlpha = 1.0;\n\n      // Add version number near the logo\n      ctx.font = '12px Roboto, Arial, sans-serif';\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n      const version = 'v0.0.10'; // TODO: Get this from config.js\n      const versionWidth = ctx.measureText(version).width;\n      ctx.fillText(\n        version,\n        canvas.width - versionWidth - padding,\n        canvas.height - padding + 5\n      );\n    }\n\n    // Convert to blob and save\n    canvas.toBlob(blob => {\n      saveAs(blob, fileName);\n    });\n\n    // Restore original styles\n    originalNodeStyles.forEach(({ element, boxShadow, border }) => {\n      element.style.boxShadow = boxShadow;\n      element.style.border = border;\n    });\n\n    originalEdgeStyles.forEach(({ element, strokeWidth }) => {\n      const paths = element.querySelectorAll('path');\n      paths.forEach(path => {\n        path.setAttribute('stroke-width', strokeWidth || '1');\n      });\n    });\n  } catch (error) {\n    console.error('Error exporting image:', error);\n    alert('Failed to export image. Please try again.');\n  }\n};\n\n/**\n * Export the argument map as a .trie file (JSON format)\n * @param {Object} mapData - The map data to export\n * @param {string} fileName - The file name for the exported file\n */\nexport const exportToTrie = (mapData, fileName) => {\n  try {\n    // Create a new object with only the necessary data\n    const exportData = {\n      version: '0.0.10',\n      timestamp: new Date().toISOString(),\n      nodes: mapData.nodes.map(node => ({\n        id: node.id,\n        position: node.position,\n        data: {\n          label: node.data.label,\n          type: node.data.type\n        }\n      })),\n      edges: mapData.edges.map(edge => ({\n        id: edge.id,\n        source: edge.source,\n        target: edge.target\n      })),\n      styles: mapData.styles || {}\n    };\n\n    // Convert to JSON string\n    const jsonString = JSON.stringify(exportData, null, 2);\n    \n    // Create blob and save\n    const blob = new Blob([jsonString], { type: 'application/json' });\n    saveAs(blob, fileName);\n  } catch (error) {\n    console.error('Error exporting .trie file:', error);\n    alert('Failed to export file. Please try again.');\n  }\n};\n\n/**\n * Import an argument map from a .trie file\n * @param {File} file - The .trie file to import\n * @returns {Promise<Object>} The imported map data\n */\nexport const importFromTrie = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    \n    reader.onload = (event) => {\n      try {\n        const importData = JSON.parse(event.target.result);\n        \n        // Validate the format\n        if (!importData.nodes || !importData.edges) {\n          throw new Error('Invalid .trie file format');\n        }\n        \n        // Process nodes to ensure they have the correct structure\n        const nodes = importData.nodes.map(node => ({\n          id: node.id,\n          type: 'default', // Ensure we're using the custom node type\n          position: node.position,\n          data: {\n            label: node.data.label,\n            type: node.data.type\n          }\n        }));\n        \n        // Process edges\n        const edges = importData.edges.map(edge => ({\n          id: edge.id,\n          source: edge.source,\n          target: edge.target,\n          type: 'default',\n          markerEnd: {\n            type: 'arrowclosed'\n          }\n        }));\n        \n        // If styles are included, we could apply them here\n        if (importData.styles) {\n          // This would be handled by the AppContext\n          localStorage.setItem('arg-map-node-styles', JSON.stringify(importData.styles));\n        }\n        \n        resolve({ nodes, edges, styles: importData.styles });\n      } catch (error) {\n        console.error('Error parsing .trie file:', error);\n        reject(new Error('Failed to parse file. Make sure it is a valid .trie file.'));\n      }\n    };\n    \n    reader.onerror = () => {\n      reject(new Error('Error reading the file.'));\n    };\n    \n    reader.readAsText(file);\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}