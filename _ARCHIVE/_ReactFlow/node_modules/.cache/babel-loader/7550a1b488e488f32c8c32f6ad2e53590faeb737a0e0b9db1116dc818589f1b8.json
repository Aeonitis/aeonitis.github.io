{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n/**\n * Custom hook for managing state in localStorage\n * @param {string} key - The localStorage key\n * @param {any} initialValue - The initial value if nothing exists in storage\n * @returns {Array} [storedValue, setValue] - Similar to useState\n */\nexport const useLocalStorage = (key, initialValue) => {\n  _s();\n  // State to store our value\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error, return initialValue\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that\n  // persists the new value to localStorage\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n\n      // Save state\n      setStoredValue(valueToStore);\n\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  // Update stored value if the key changes\n  useEffect(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      setStoredValue(item ? JSON.parse(item) : initialValue);\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\" on key change:`, error);\n      setStoredValue(initialValue);\n    }\n  }, [key, initialValue]);\n  return [storedValue, setValue];\n};\n_s(useLocalStorage, \"4UwTc5yuQlJmynCnQyfcgg3g+Yo=\");","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","_s","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["/Users/aeonitis/dev/wip/n/aeonitis.github.io/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n/**\n * Custom hook for managing state in localStorage\n * @param {string} key - The localStorage key\n * @param {any} initialValue - The initial value if nothing exists in storage\n * @returns {Array} [storedValue, setValue] - Similar to useState\n */\nexport const useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error, return initialValue\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that\n  // persists the new value to localStorage\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      \n      // Save state\n      setStoredValue(valueToStore);\n      \n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  // Update stored value if the key changes\n  useEffect(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      setStoredValue(item ? JSON.parse(item) : initialValue);\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\" on key change:`, error);\n      setStoredValue(initialValue);\n    }\n  }, [key, initialValue]);\n\n  return [storedValue, setValue];\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGA,CAACC,GAAG,EAAEC,YAAY,KAAK;EAAAC,EAAA;EACpD;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,MAAM;IACnD,IAAI;MACF;MACA,MAAMQ,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,GAAG,CAAC;MAC7C;MACA,OAAOK,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,GAAGJ,YAAY;IAC/C,CAAC,CAAC,OAAOU,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,mCAAmCX,GAAG,IAAI,EAAEW,KAAK,CAAC;MAChE,OAAOV,YAAY;IACrB;EACF,CAAC,CAAC;;EAEF;EACA;EACA,MAAMY,QAAQ,GAAIC,KAAK,IAAK;IAC1B,IAAI;MACF;MACA,MAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACX,WAAW,CAAC,GAAGW,KAAK;;MAExD;MACAV,cAAc,CAACW,YAAY,CAAC;;MAE5B;MACAT,MAAM,CAACC,YAAY,CAACU,OAAO,CAACjB,GAAG,EAAES,IAAI,CAACS,SAAS,CAACH,YAAY,CAAC,CAAC;IAChE,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,mCAAmCX,GAAG,IAAI,EAAEW,KAAK,CAAC;IAClE;EACF,CAAC;;EAED;EACAb,SAAS,CAAC,MAAM;IACd,IAAI;MACF,MAAMO,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,GAAG,CAAC;MAC7CI,cAAc,CAACC,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,GAAGJ,YAAY,CAAC;IACxD,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCX,GAAG,kBAAkB,EAAEW,KAAK,CAAC;MAC9EP,cAAc,CAACH,YAAY,CAAC;IAC9B;EACF,CAAC,EAAE,CAACD,GAAG,EAAEC,YAAY,CAAC,CAAC;EAEvB,OAAO,CAACE,WAAW,EAAEU,QAAQ,CAAC;AAChC,CAAC;AAACX,EAAA,CA9CWH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}