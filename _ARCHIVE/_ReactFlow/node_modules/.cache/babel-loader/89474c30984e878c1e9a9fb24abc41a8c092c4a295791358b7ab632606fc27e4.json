{"ast":null,"code":"var _jsxFileName = \"/Users/aeonitis/dev/wip/n/aeonitis.github.io/src/components/ArgumentMap/ArgumentMap.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useRef, useCallback, useContext, useEffect } from 'react';\nimport ReactFlow, { addEdge, Controls, Background, useNodesState, useEdgesState, MarkerType } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { AppContext } from '../../context/AppContext';\nimport NodeButton from './NodeButton';\nimport { validateStatement } from '../../utils/validationUtils';\nimport { exportToImage, exportToTrie, importFromTrie } from '../../utils/exportUtils';\n\n// Define node types and their default colors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NODE_TYPES = {\n  resolution: {\n    label: 'Resolution',\n    color: '#f0e6f6'\n  },\n  because: {\n    label: 'Because',\n    color: '#e6f6e6'\n  },\n  but: {\n    label: 'But',\n    color: '#f6e6e6'\n  },\n  however: {\n    label: 'However',\n    color: '#e6e6f6'\n  }\n};\n\n// Custom node component\nconst CustomNode = ({\n  data,\n  id\n}) => {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const [nodeText, setNodeText] = useState(data.label);\n  const inputRef = useRef(null);\n  const {\n    updateNodeText,\n    nodeStyles\n  } = useContext(AppContext);\n\n  // Get the appropriate color based on node type and custom styles\n  const nodeColor = nodeStyles[data.type] || NODE_TYPES[data.type].color;\n  const handleDoubleClick = () => {\n    setIsEditing(true);\n    setTimeout(() => {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    }, 0);\n  };\n  const handleInputBlur = () => {\n    if (validateStatement(nodeText)) {\n      updateNodeText(id, nodeText);\n      setIsEditing(false);\n    } else {\n      alert('Please enter a valid statement (a complete sentence with at least 3 words).');\n      setNodeText(data.label);\n      setIsEditing(false);\n    }\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      handleInputBlur();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"node-wrapper\",\n    style: {\n      background: nodeColor,\n      borderRadius: '8px',\n      padding: '10px',\n      minWidth: '200px',\n      width: 'auto',\n      maxWidth: 'none',\n      // Remove maximum width constraint\n      boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n      border: `2px solid ${data.selected ? '#1a73e8' : 'transparent'}`,\n      wordBreak: 'break-word' // Ensure text wraps properly\n    },\n    onDoubleClick: handleDoubleClick,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"node-header\",\n      style: {\n        fontWeight: 'bold',\n        marginBottom: '5px'\n      },\n      children: NODE_TYPES[data.type].label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), isEditing ? /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"text\",\n      value: nodeText,\n      onChange: e => setNodeText(e.target.value),\n      onBlur: handleInputBlur,\n      onKeyDown: handleKeyDown,\n      style: {\n        width: '100%',\n        padding: '5px',\n        borderRadius: '4px',\n        border: '1px solid #ccc'\n      },\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"node-content\",\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), !isEditing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"node-buttons\",\n      style: {\n        marginTop: '10px',\n        display: 'flex',\n        gap: '5px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(NodeButton, {\n        nodeId: id,\n        type: \"because\",\n        label: \"Because\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NodeButton, {\n        nodeId: id,\n        type: \"but\",\n        label: \"But\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NodeButton, {\n        nodeId: id,\n        type: \"however\",\n        label: \"However\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n// Main ArgumentMap component\n_s(CustomNode, \"EBFfIkp20n4gXV/ucNt/KC8bEac=\");\n_c = CustomNode;\nconst ArgumentMap = ({\n  initialResolution\n}) => {\n  _s2();\n  const {\n    saveWipState,\n    loadWipState,\n    nodeStyles,\n    setCurrentMap\n  } = useContext(AppContext);\n  const reactFlowWrapper = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  // Initialize the resolution node when component mounts or resolution changes\n  useEffect(() => {\n    if (initialResolution && !nodes.length) {\n      const initialNodes = [{\n        id: '1',\n        type: 'default',\n        position: {\n          x: 250,\n          y: 25\n        },\n        data: {\n          label: initialResolution,\n          type: 'resolution'\n        }\n      }];\n      setNodes(initialNodes);\n    }\n  }, [initialResolution, setNodes, nodes.length]);\n\n  // Save current map state to context when it changes\n  useEffect(() => {\n    if (nodes.length > 0) {\n      setCurrentMap({\n        nodes,\n        edges\n      });\n      saveWipState({\n        nodes,\n        edges\n      });\n    }\n  }, [nodes, edges, setCurrentMap, saveWipState]);\n\n  // Try to load saved WIP state when component mounts\n  useEffect(() => {\n    const savedState = loadWipState();\n    if (savedState && savedState.nodes && savedState.nodes.length > 0) {\n      setNodes(savedState.nodes);\n      setEdges(savedState.edges || []);\n    }\n  }, [loadWipState, setNodes, setEdges]);\n\n  // Add a new node connected to a parent node\n  const addNode = useCallback((parentId, nodeType) => {\n    // Find the parent node to position the new node relatively\n    const parentNode = nodes.find(node => node.id === parentId);\n    if (!parentNode) return;\n    const newNodeId = (nodes.length + 1).toString();\n    const newNode = {\n      id: newNodeId,\n      type: 'default',\n      position: {\n        x: parentNode.position.x + Math.random() * 50 - 25,\n        y: parentNode.position.y + 150\n      },\n      data: {\n        label: `Enter your ${nodeType} statement`,\n        type: nodeType\n      }\n    };\n    const newEdge = {\n      id: `e${parentId}-${newNodeId}`,\n      source: parentId,\n      target: newNodeId,\n      type: 'default',\n      markerEnd: {\n        type: MarkerType.ArrowClosed\n      }\n    };\n    setNodes(nds => [...nds, newNode]);\n    setEdges(eds => [...eds, newEdge]);\n  }, [nodes, setNodes, setEdges]);\n\n  // Set the context for NodeButton component\n  useEffect(() => {\n    // Register addNode function to be accessible by NodeButton\n    window.addNodeToArgumentMap = addNode;\n  }, [addNode]);\n\n  // Handle connections between nodes\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n\n  // Export the argument map as an image\n  const handleExportImage = useCallback(() => {\n    if (reactFlowInstance && reactFlowWrapper.current) {\n      exportToImage(reactFlowWrapper.current, 'argument-map.png');\n    }\n  }, [reactFlowInstance]);\n\n  // Export the argument map as a .trie file\n  const handleExportTrie = useCallback(() => {\n    if (nodes.length > 0) {\n      exportToTrie({\n        nodes,\n        edges,\n        styles: nodeStyles\n      }, 'argument-map.trie');\n    }\n  }, [nodes, edges, nodeStyles]);\n\n  // Import from a .trie file\n  const handleImportTrie = useCallback(async event => {\n    try {\n      const file = event.target.files[0];\n      const importedData = await importFromTrie(file);\n      if (importedData && importedData.nodes && importedData.edges) {\n        setNodes(importedData.nodes);\n        setEdges(importedData.edges);\n      }\n    } catch (error) {\n      console.error('Error importing file:', error);\n      alert('Failed to import the file. Please ensure it is a valid .trie file.');\n    }\n  }, [setNodes, setEdges]);\n\n  // Update node positions after drag\n  const onNodeDragStop = useCallback((_, node) => {\n    setNodes(prevNodes => prevNodes.map(n => n.id === node.id ? {\n      ...n,\n      position: node.position\n    } : n));\n  }, [setNodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"argument-map-container\",\n    style: {\n      height: 'calc(100vh - 150px)',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"argument-map-actions\",\n      style: {\n        display: 'flex',\n        gap: '10px',\n        position: 'absolute',\n        zIndex: 5,\n        top: '10px',\n        left: '10px',\n        background: 'rgba(255, 255, 255, 0.8)',\n        padding: '5px',\n        borderRadius: '4px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleExportImage,\n        style: {\n          padding: '5px 10px',\n          fontSize: '12px',\n          backgroundColor: '#f0f0f0',\n          border: '1px solid #ccc',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Export as PNG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleExportTrie,\n        style: {\n          padding: '5px 10px',\n          fontSize: '12px',\n          backgroundColor: '#f0f0f0',\n          border: '1px solid #ccc',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Export as .trie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"import-button\",\n        style: {\n          padding: '5px 10px',\n          fontSize: '12px',\n          backgroundColor: '#f0f0f0',\n          borderRadius: '4px',\n          cursor: 'pointer',\n          border: '1px solid #ccc',\n          margin: 0\n        },\n        children: [\"Import .trie\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".trie\",\n          onChange: handleImportTrie,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: reactFlowWrapper,\n      style: {\n        height: '100%',\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onInit: setReactFlowInstance,\n        onNodeDragStop: onNodeDragStop,\n        nodeTypes: {\n          default: CustomNode\n        },\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          color: \"#f8f8f8\",\n          variant: \"dots\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n};\n_s2(ArgumentMap, \"Bof5zJLQFe1FrRx5cWfrfvlks0g=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c2 = ArgumentMap;\nexport default ArgumentMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomNode\");\n$RefreshReg$(_c2, \"ArgumentMap\");","map":{"version":3,"names":["React","useState","useRef","useCallback","useContext","useEffect","ReactFlow","addEdge","Controls","Background","useNodesState","useEdgesState","MarkerType","AppContext","NodeButton","validateStatement","exportToImage","exportToTrie","importFromTrie","jsxDEV","_jsxDEV","NODE_TYPES","resolution","label","color","because","but","however","CustomNode","data","id","_s","isEditing","setIsEditing","nodeText","setNodeText","inputRef","updateNodeText","nodeStyles","nodeColor","type","handleDoubleClick","setTimeout","current","focus","handleInputBlur","alert","handleKeyDown","e","key","className","style","background","borderRadius","padding","minWidth","width","maxWidth","boxShadow","border","selected","wordBreak","onDoubleClick","children","fontWeight","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","value","onChange","target","onBlur","onKeyDown","autoFocus","marginTop","display","gap","nodeId","_c","ArgumentMap","initialResolution","_s2","saveWipState","loadWipState","setCurrentMap","reactFlowWrapper","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","reactFlowInstance","setReactFlowInstance","length","initialNodes","position","x","y","savedState","addNode","parentId","nodeType","parentNode","find","node","newNodeId","toString","newNode","Math","random","newEdge","source","markerEnd","ArrowClosed","nds","eds","window","addNodeToArgumentMap","onConnect","params","handleExportImage","handleExportTrie","styles","handleImportTrie","event","file","files","importedData","error","console","onNodeDragStop","_","prevNodes","map","n","height","zIndex","top","left","onClick","fontSize","backgroundColor","cursor","margin","accept","onInit","nodeTypes","default","fitView","variant","_c2","$RefreshReg$"],"sources":["/Users/aeonitis/dev/wip/n/aeonitis.github.io/src/components/ArgumentMap/ArgumentMap.jsx"],"sourcesContent":["import React, { useState, useRef, useCallback, useContext, useEffect } from 'react';\nimport ReactFlow, { \n  addEdge, \n  Controls, \n  Background, \n  useNodesState, \n  useEdgesState, \n  MarkerType \n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { AppContext } from '../../context/AppContext';\nimport NodeButton from './NodeButton';\nimport { validateStatement } from '../../utils/validationUtils';\nimport { exportToImage, exportToTrie, importFromTrie } from '../../utils/exportUtils';\n\n// Define node types and their default colors\nconst NODE_TYPES = {\n  resolution: { label: 'Resolution', color: '#f0e6f6' },\n  because: { label: 'Because', color: '#e6f6e6' },\n  but: { label: 'But', color: '#f6e6e6' },\n  however: { label: 'However', color: '#e6e6f6' }\n};\n\n// Custom node component\nconst CustomNode = ({ data, id }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [nodeText, setNodeText] = useState(data.label);\n  const inputRef = useRef(null);\n  const { updateNodeText, nodeStyles } = useContext(AppContext);\n\n  // Get the appropriate color based on node type and custom styles\n  const nodeColor = nodeStyles[data.type] || NODE_TYPES[data.type].color;\n\n  const handleDoubleClick = () => {\n    setIsEditing(true);\n    setTimeout(() => {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    }, 0);\n  };\n\n  const handleInputBlur = () => {\n    if (validateStatement(nodeText)) {\n      updateNodeText(id, nodeText);\n      setIsEditing(false);\n    } else {\n      alert('Please enter a valid statement (a complete sentence with at least 3 words).');\n      setNodeText(data.label);\n      setIsEditing(false);\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      handleInputBlur();\n    }\n  };\n\n  return (\n    <div \n      className=\"node-wrapper\"\n      style={{ \n        background: nodeColor,\n        borderRadius: '8px',\n        padding: '10px', \n        minWidth: '200px',\n        width: 'auto',\n        maxWidth: 'none', // Remove maximum width constraint\n        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n        border: `2px solid ${data.selected ? '#1a73e8' : 'transparent'}`,\n        wordBreak: 'break-word' // Ensure text wraps properly\n      }}\n      onDoubleClick={handleDoubleClick}\n    >\n      <div className=\"node-header\" style={{ fontWeight: 'bold', marginBottom: '5px' }}>\n        {NODE_TYPES[data.type].label}\n      </div>\n      \n      {isEditing ? (\n        <input\n          ref={inputRef}\n          type=\"text\"\n          value={nodeText}\n          onChange={(e) => setNodeText(e.target.value)}\n          onBlur={handleInputBlur}\n          onKeyDown={handleKeyDown}\n          style={{ \n            width: '100%', \n            padding: '5px',\n            borderRadius: '4px',\n            border: '1px solid #ccc'\n          }}\n          autoFocus\n        />\n      ) : (\n        <div className=\"node-content\">{data.label}</div>\n      )}\n\n      {/* Only show buttons for adding nodes if not editing */}\n      {!isEditing && (\n        <div className=\"node-buttons\" style={{ marginTop: '10px', display: 'flex', gap: '5px' }}>\n          <NodeButton nodeId={id} type=\"because\" label=\"Because\" />\n          <NodeButton nodeId={id} type=\"but\" label=\"But\" />\n          <NodeButton nodeId={id} type=\"however\" label=\"However\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Main ArgumentMap component\nconst ArgumentMap = ({ initialResolution }) => {\n  const { \n    saveWipState, \n    loadWipState, \n    nodeStyles, \n    setCurrentMap \n  } = useContext(AppContext);\n  \n  const reactFlowWrapper = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  // Initialize the resolution node when component mounts or resolution changes\n  useEffect(() => {\n    if (initialResolution && !nodes.length) {\n      const initialNodes = [\n        {\n          id: '1',\n          type: 'default',\n          position: { x: 250, y: 25 },\n          data: { \n            label: initialResolution,\n            type: 'resolution',\n          },\n        },\n      ];\n      setNodes(initialNodes);\n    }\n  }, [initialResolution, setNodes, nodes.length]);\n\n  // Save current map state to context when it changes\n  useEffect(() => {\n    if (nodes.length > 0) {\n      setCurrentMap({ nodes, edges });\n      saveWipState({ nodes, edges });\n    }\n  }, [nodes, edges, setCurrentMap, saveWipState]);\n\n  // Try to load saved WIP state when component mounts\n  useEffect(() => {\n    const savedState = loadWipState();\n    if (savedState && savedState.nodes && savedState.nodes.length > 0) {\n      setNodes(savedState.nodes);\n      setEdges(savedState.edges || []);\n    }\n  }, [loadWipState, setNodes, setEdges]);\n\n  // Add a new node connected to a parent node\n  const addNode = useCallback((parentId, nodeType) => {\n    // Find the parent node to position the new node relatively\n    const parentNode = nodes.find(node => node.id === parentId);\n    if (!parentNode) return;\n\n    const newNodeId = (nodes.length + 1).toString();\n    const newNode = {\n      id: newNodeId,\n      type: 'default',\n      position: { \n        x: parentNode.position.x + (Math.random() * 50) - 25,\n        y: parentNode.position.y + 150\n      },\n      data: { \n        label: `Enter your ${nodeType} statement`,\n        type: nodeType,\n      },\n    };\n\n    const newEdge = {\n      id: `e${parentId}-${newNodeId}`,\n      source: parentId,\n      target: newNodeId,\n      type: 'default',\n      markerEnd: {\n        type: MarkerType.ArrowClosed,\n      },\n    };\n\n    setNodes(nds => [...nds, newNode]);\n    setEdges(eds => [...eds, newEdge]);\n  }, [nodes, setNodes, setEdges]);\n\n  // Set the context for NodeButton component\n  useEffect(() => {\n    // Register addNode function to be accessible by NodeButton\n    window.addNodeToArgumentMap = addNode;\n  }, [addNode]);\n\n  // Handle connections between nodes\n  const onConnect = useCallback(\n    (params) => setEdges((eds) => addEdge(params, eds)),\n    [setEdges]\n  );\n\n  // Export the argument map as an image\n  const handleExportImage = useCallback(() => {\n    if (reactFlowInstance && reactFlowWrapper.current) {\n      exportToImage(reactFlowWrapper.current, 'argument-map.png');\n    }\n  }, [reactFlowInstance]);\n\n  // Export the argument map as a .trie file\n  const handleExportTrie = useCallback(() => {\n    if (nodes.length > 0) {\n      exportToTrie({ nodes, edges, styles: nodeStyles }, 'argument-map.trie');\n    }\n  }, [nodes, edges, nodeStyles]);\n\n  // Import from a .trie file\n  const handleImportTrie = useCallback(async (event) => {\n    try {\n      const file = event.target.files[0];\n      const importedData = await importFromTrie(file);\n      \n      if (importedData && importedData.nodes && importedData.edges) {\n        setNodes(importedData.nodes);\n        setEdges(importedData.edges);\n      }\n    } catch (error) {\n      console.error('Error importing file:', error);\n      alert('Failed to import the file. Please ensure it is a valid .trie file.');\n    }\n  }, [setNodes, setEdges]);\n\n  // Update node positions after drag\n  const onNodeDragStop = useCallback((_, node) => {\n    setNodes((prevNodes) =>\n      prevNodes.map((n) => (n.id === node.id ? { ...n, position: node.position } : n))\n    );\n  }, [setNodes]);\n\n  return (\n    <div className=\"argument-map-container\" style={{ height: 'calc(100vh - 150px)', width: '100%' }}>\n      <div className=\"argument-map-actions\" style={{ \n        display: 'flex', \n        gap: '10px',\n        position: 'absolute',\n        zIndex: 5,\n        top: '10px',\n        left: '10px',\n        background: 'rgba(255, 255, 255, 0.8)',\n        padding: '5px',\n        borderRadius: '4px'\n      }}>\n        <button \n          onClick={handleExportImage}\n          style={{\n            padding: '5px 10px',\n            fontSize: '12px',\n            backgroundColor: '#f0f0f0',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          }}\n        >Export as PNG</button>\n        <button \n          onClick={handleExportTrie}\n          style={{\n            padding: '5px 10px',\n            fontSize: '12px',\n            backgroundColor: '#f0f0f0',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          }}\n        >Export as .trie</button>\n        <label className=\"import-button\" style={{ \n          padding: '5px 10px', \n          fontSize: '12px',\n          backgroundColor: '#f0f0f0', \n          borderRadius: '4px', \n          cursor: 'pointer',\n          border: '1px solid #ccc',\n          margin: 0\n        }}>\n          Import .trie\n          <input \n            type=\"file\" \n            accept=\".trie\" \n            onChange={handleImportTrie} \n            style={{ display: 'none' }} \n          />\n        </label>\n      </div>\n\n      <div ref={reactFlowWrapper} style={{ height: '100%', width: '100%' }}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onInit={setReactFlowInstance}\n          onNodeDragStop={onNodeDragStop}\n          nodeTypes={{ default: CustomNode }}\n          fitView\n        >\n          <Controls />\n          <Background color=\"#f8f8f8\" variant=\"dots\" />\n        </ReactFlow>\n      </div>\n    </div>\n  );\n};\n\nexport default ArgumentMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}