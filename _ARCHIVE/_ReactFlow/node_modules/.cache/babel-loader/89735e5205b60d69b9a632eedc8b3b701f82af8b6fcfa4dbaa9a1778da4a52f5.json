{"ast":null,"code":"var _jsxFileName = \"/Users/aeonitis/dev/wip/n/aeonitis.github.io/src/components/ArgumentMap/ArgumentMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback, useContext, useEffect } from 'react';\nimport ReactFlow, { addEdge, Controls, Background, useNodesState, useEdgesState, MarkerType } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { AppContext } from '../../context/AppContext';\nimport CustomNode from './CustomNode';\nimport { exportToImage, exportToTrie, importFromTrie } from '../../utils/exportUtils';\n\n// Define node types and their default colors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NODE_TYPES = {\n  resolution: {\n    label: 'Resolution',\n    color: {\n      background: '#f0e6f6',\n      text: '#000000'\n    }\n  },\n  because: {\n    label: 'Because',\n    color: {\n      background: '#e6f6e6',\n      text: '#000000'\n    }\n  },\n  but: {\n    label: 'But',\n    color: {\n      background: '#f6e6e6',\n      text: '#000000'\n    }\n  },\n  however: {\n    label: 'However',\n    color: {\n      background: '#e6e6f6',\n      text: '#000000'\n    }\n  }\n};\n\n// Main ArgumentMap component\nconst ArgumentMap = ({\n  initialResolution\n}) => {\n  _s();\n  const {\n    saveWipState,\n    loadWipState,\n    nodeStyles,\n    setCurrentMap,\n    deleteNode\n  } = useContext(AppContext);\n  const reactFlowWrapper = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  // Initialize the resolution node when component mounts or resolution changes\n  useEffect(() => {\n    if (initialResolution && !nodes.length) {\n      const initialNodes = [{\n        id: '1',\n        type: 'custom',\n        position: {\n          x: 400,\n          y: 100\n        },\n        // Centered position\n        data: {\n          label: initialResolution,\n          type: 'resolution'\n        }\n      }];\n      setNodes(initialNodes);\n    }\n  }, [initialResolution, setNodes, nodes.length]);\n\n  // Save current map state to context when it changes\n  useEffect(() => {\n    if (nodes.length > 0) {\n      setCurrentMap({\n        nodes,\n        edges\n      });\n      saveWipState({\n        nodes,\n        edges\n      });\n    }\n  }, [nodes, edges, setCurrentMap, saveWipState]);\n\n  // Try to load saved WIP state when component mounts\n  useEffect(() => {\n    const savedState = loadWipState();\n    if (savedState && savedState.nodes && savedState.nodes.length > 0) {\n      setNodes(savedState.nodes);\n      setEdges(savedState.edges || []);\n    }\n  }, [loadWipState, setNodes, setEdges]);\n\n  // Add a new node connected to a parent node\n  const addNode = useCallback((parentId, nodeType) => {\n    var _nodeStyles$nodeType, _NODE_TYPES$nodeType, _NODE_TYPES$nodeType$;\n    console.log(\"ADDING NODE:\", parentId, nodeType);\n\n    // Find the parent node to position the new node relatively\n    const parentNode = nodes.find(node => node.id === parentId);\n    if (!parentNode) {\n      console.error(\"Parent node not found:\", parentId);\n      return;\n    }\n\n    // Count existing children to calculate position\n    const existingChildren = edges.filter(edge => edge.source === parentId).length;\n\n    // Calculate horizontal offset based on number of children\n    // First child is centered, subsequent children are offset left/right\n    let xOffset = 0;\n    if (existingChildren > 0) {\n      // Alternate left and right for odd/even children\n      const direction = existingChildren % 2 === 0 ? 1 : -1;\n      // Increase offset for each pair of children\n      const magnitude = Math.ceil(existingChildren / 2) * 200;\n      xOffset = direction * magnitude;\n    }\n    const newNodeId = (nodes.length + 1).toString();\n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: {\n        x: parentNode.position.x + xOffset,\n        y: parentNode.position.y + 180\n      },\n      data: {\n        label: `Enter your ${nodeType} statement`,\n        type: nodeType\n      }\n    };\n\n    // Get color for this node type (for edge color)\n    const nodeTypeColor = ((_nodeStyles$nodeType = nodeStyles[nodeType]) === null || _nodeStyles$nodeType === void 0 ? void 0 : _nodeStyles$nodeType.background) || ((_NODE_TYPES$nodeType = NODE_TYPES[nodeType]) === null || _NODE_TYPES$nodeType === void 0 ? void 0 : (_NODE_TYPES$nodeType$ = _NODE_TYPES$nodeType.color) === null || _NODE_TYPES$nodeType$ === void 0 ? void 0 : _NODE_TYPES$nodeType$.background) || '#cccccc';\n    const newEdge = {\n      id: `e${parentId}-${newNodeId}`,\n      source: parentId,\n      target: newNodeId,\n      type: 'default',\n      animated: false,\n      style: {\n        stroke: nodeTypeColor,\n        strokeWidth: 2\n      },\n      markerEnd: {\n        type: MarkerType.ArrowClosed,\n        color: nodeTypeColor\n      }\n    };\n    setNodes(nds => [...nds, newNode]);\n    setEdges(eds => [...eds, newEdge]);\n\n    // Fit view after adding nodes\n    setTimeout(() => {\n      if (reactFlowInstance) {\n        reactFlowInstance.fitView({\n          padding: 0.2\n        });\n      }\n    }, 50);\n  }, [nodes, edges, nodeStyles, setNodes, setEdges, reactFlowInstance]);\n\n  // Handle connections between nodes\n  const onConnect = useCallback(params => setEdges(eds => addEdge({\n    ...params,\n    style: {\n      stroke: '#cccccc',\n      strokeWidth: 2\n    },\n    markerEnd: {\n      type: MarkerType.ArrowClosed\n    }\n  }, eds)), [setEdges]);\n\n  // Export the argument map as an image\n  const handleExportImage = useCallback(() => {\n    if (reactFlowInstance && reactFlowWrapper.current) {\n      exportToImage(reactFlowWrapper.current, 'argument-map.png');\n    }\n  }, [reactFlowInstance]);\n\n  // Export the argument map as a .trie file\n  const handleExportTrie = useCallback(() => {\n    if (nodes.length > 0) {\n      exportToTrie({\n        nodes,\n        edges,\n        styles: nodeStyles\n      }, 'argument-map.trie');\n    }\n  }, [nodes, edges, nodeStyles]);\n\n  // Import from a .trie file\n  const handleImportTrie = useCallback(async event => {\n    try {\n      const file = event.target.files[0];\n      const importedData = await importFromTrie(file);\n      if (importedData && importedData.nodes && importedData.edges) {\n        setNodes(importedData.nodes);\n        setEdges(importedData.edges);\n      }\n    } catch (error) {\n      console.error('Error importing file:', error);\n      alert('Failed to import the file. Please ensure it is a valid .trie file.');\n    }\n  }, [setNodes, setEdges]);\n\n  // Update node positions after drag\n  const onNodeDragStop = useCallback((_, node) => {\n    setNodes(prevNodes => prevNodes.map(n => n.id === node.id ? {\n      ...n,\n      position: node.position\n    } : n));\n  }, [setNodes]);\n  const handleInit = instance => {\n    setReactFlowInstance(instance);\n    setTimeout(() => {\n      instance.fitView({\n        padding: 0.2\n      });\n    }, 100);\n  };\n\n  // Define the custom node type with direct access to the addNode function\n  const nodeTypes = {\n    custom: props => /*#__PURE__*/_jsxDEV(CustomNode, {\n      ...props,\n      onAddChild: addNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 24\n    }, this)\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"argument-map-container\",\n    style: {\n      height: 'calc(100vh - 200px)',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"argument-map-actions\",\n      style: {\n        display: 'flex',\n        gap: '10px',\n        position: 'absolute',\n        zIndex: 5,\n        top: '10px',\n        left: '10px',\n        background: 'rgba(255, 255, 255, 0.8)',\n        padding: '5px',\n        borderRadius: '4px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleExportImage,\n        style: {\n          padding: '5px 10px',\n          fontSize: '12px',\n          backgroundColor: '#f0f0f0',\n          border: '1px solid #ccc',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Export as PNG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleExportTrie,\n        style: {\n          padding: '5px 10px',\n          fontSize: '12px',\n          backgroundColor: '#f0f0f0',\n          border: '1px solid #ccc',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Export as .trie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"import-button\",\n        style: {\n          padding: '5px 10px',\n          fontSize: '12px',\n          backgroundColor: '#f0f0f0',\n          borderRadius: '4px',\n          cursor: 'pointer',\n          border: '1px solid #ccc',\n          margin: 0\n        },\n        children: [\"Import .trie\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".trie\",\n          onChange: handleImportTrie,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: reactFlowWrapper,\n      style: {\n        height: '100%',\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onInit: handleInit,\n        onNodeDragStop: onNodeDragStop,\n        nodeTypes: nodeTypes,\n        fitView: true,\n        fitViewOptions: {\n          padding: 0.2\n        },\n        minZoom: 0.5,\n        maxZoom: 2,\n        defaultViewport: {\n          x: 0,\n          y: 0,\n          zoom: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Controls, {\n          position: \"bottom-right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          color: \"#f8f8f8\",\n          variant: \"dots\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s(ArgumentMap, \"4p5u9Y4Kcy4an0TasRcJJ9GUUFA=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = ArgumentMap;\nexport default ArgumentMap;\nvar _c;\n$RefreshReg$(_c, \"ArgumentMap\");","map":{"version":3,"names":["React","useState","useRef","useCallback","useContext","useEffect","ReactFlow","addEdge","Controls","Background","useNodesState","useEdgesState","MarkerType","AppContext","CustomNode","exportToImage","exportToTrie","importFromTrie","jsxDEV","_jsxDEV","NODE_TYPES","resolution","label","color","background","text","because","but","however","ArgumentMap","initialResolution","_s","saveWipState","loadWipState","nodeStyles","setCurrentMap","deleteNode","reactFlowWrapper","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","reactFlowInstance","setReactFlowInstance","length","initialNodes","id","type","position","x","y","data","savedState","addNode","parentId","nodeType","_nodeStyles$nodeType","_NODE_TYPES$nodeType","_NODE_TYPES$nodeType$","console","log","parentNode","find","node","error","existingChildren","filter","edge","source","xOffset","direction","magnitude","Math","ceil","newNodeId","toString","newNode","nodeTypeColor","newEdge","target","animated","style","stroke","strokeWidth","markerEnd","ArrowClosed","nds","eds","setTimeout","fitView","padding","onConnect","params","handleExportImage","current","handleExportTrie","styles","handleImportTrie","event","file","files","importedData","alert","onNodeDragStop","_","prevNodes","map","n","handleInit","instance","nodeTypes","custom","props","onAddChild","fileName","_jsxFileName","lineNumber","columnNumber","className","height","width","children","display","gap","zIndex","top","left","borderRadius","onClick","fontSize","backgroundColor","border","cursor","margin","accept","onChange","ref","onInit","fitViewOptions","minZoom","maxZoom","defaultViewport","zoom","variant","_c","$RefreshReg$"],"sources":["/Users/aeonitis/dev/wip/n/aeonitis.github.io/src/components/ArgumentMap/ArgumentMap.jsx"],"sourcesContent":["import React, { useState, useRef, useCallback, useContext, useEffect } from 'react';\nimport ReactFlow, { \n  addEdge, \n  Controls, \n  Background, \n  useNodesState, \n  useEdgesState, \n  MarkerType \n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { AppContext } from '../../context/AppContext';\nimport CustomNode from './CustomNode';\nimport { exportToImage, exportToTrie, importFromTrie } from '../../utils/exportUtils';\n\n// Define node types and their default colors\nconst NODE_TYPES = {\n  resolution: { label: 'Resolution', color: { background: '#f0e6f6', text: '#000000' } },\n  because: { label: 'Because', color: { background: '#e6f6e6', text: '#000000' } },\n  but: { label: 'But', color: { background: '#f6e6e6', text: '#000000' } },\n  however: { label: 'However', color: { background: '#e6e6f6', text: '#000000' } }\n};\n\n// Main ArgumentMap component\nconst ArgumentMap = ({ initialResolution }) => {\n  const { \n    saveWipState, \n    loadWipState, \n    nodeStyles, \n    setCurrentMap,\n    deleteNode \n  } = useContext(AppContext);\n  \n  const reactFlowWrapper = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  // Initialize the resolution node when component mounts or resolution changes\n  useEffect(() => {\n    if (initialResolution && !nodes.length) {\n      const initialNodes = [\n        {\n          id: '1',\n          type: 'custom',\n          position: { x: 400, y: 100 }, // Centered position\n          data: { \n            label: initialResolution,\n            type: 'resolution',\n          },\n        },\n      ];\n      setNodes(initialNodes);\n    }\n  }, [initialResolution, setNodes, nodes.length]);\n\n  // Save current map state to context when it changes\n  useEffect(() => {\n    if (nodes.length > 0) {\n      setCurrentMap({ nodes, edges });\n      saveWipState({ nodes, edges });\n    }\n  }, [nodes, edges, setCurrentMap, saveWipState]);\n\n  // Try to load saved WIP state when component mounts\n  useEffect(() => {\n    const savedState = loadWipState();\n    if (savedState && savedState.nodes && savedState.nodes.length > 0) {\n      setNodes(savedState.nodes);\n      setEdges(savedState.edges || []);\n    }\n  }, [loadWipState, setNodes, setEdges]);\n\n  // Add a new node connected to a parent node\n  const addNode = useCallback((parentId, nodeType) => {\n    console.log(\"ADDING NODE:\", parentId, nodeType);\n    \n    // Find the parent node to position the new node relatively\n    const parentNode = nodes.find(node => node.id === parentId);\n    if (!parentNode) {\n      console.error(\"Parent node not found:\", parentId);\n      return;\n    }\n\n    // Count existing children to calculate position\n    const existingChildren = edges.filter(edge => edge.source === parentId).length;\n    \n    // Calculate horizontal offset based on number of children\n    // First child is centered, subsequent children are offset left/right\n    let xOffset = 0;\n    if (existingChildren > 0) {\n      // Alternate left and right for odd/even children\n      const direction = existingChildren % 2 === 0 ? 1 : -1;\n      // Increase offset for each pair of children\n      const magnitude = Math.ceil(existingChildren / 2) * 200;\n      xOffset = direction * magnitude;\n    }\n\n    const newNodeId = (nodes.length + 1).toString();\n    const newNode = {\n      id: newNodeId,\n      type: 'custom',\n      position: { \n        x: parentNode.position.x + xOffset,\n        y: parentNode.position.y + 180\n      },\n      data: { \n        label: `Enter your ${nodeType} statement`,\n        type: nodeType,\n      },\n    };\n\n    // Get color for this node type (for edge color)\n    const nodeTypeColor = nodeStyles[nodeType]?.background || \n                          NODE_TYPES[nodeType]?.color?.background || \n                          '#cccccc';\n    \n    const newEdge = {\n      id: `e${parentId}-${newNodeId}`,\n      source: parentId,\n      target: newNodeId,\n      type: 'default',\n      animated: false,\n      style: { stroke: nodeTypeColor, strokeWidth: 2 },\n      markerEnd: {\n        type: MarkerType.ArrowClosed,\n        color: nodeTypeColor\n      },\n    };\n\n    setNodes(nds => [...nds, newNode]);\n    setEdges(eds => [...eds, newEdge]);\n    \n    // Fit view after adding nodes\n    setTimeout(() => {\n      if (reactFlowInstance) {\n        reactFlowInstance.fitView({ padding: 0.2 });\n      }\n    }, 50);\n  }, [nodes, edges, nodeStyles, setNodes, setEdges, reactFlowInstance]);\n\n  // Handle connections between nodes\n  const onConnect = useCallback(\n    (params) => setEdges((eds) => addEdge({\n      ...params,\n      style: { stroke: '#cccccc', strokeWidth: 2 },\n      markerEnd: {\n        type: MarkerType.ArrowClosed,\n      },\n    }, eds)),\n    [setEdges]\n  );\n\n  // Export the argument map as an image\n  const handleExportImage = useCallback(() => {\n    if (reactFlowInstance && reactFlowWrapper.current) {\n      exportToImage(reactFlowWrapper.current, 'argument-map.png');\n    }\n  }, [reactFlowInstance]);\n\n  // Export the argument map as a .trie file\n  const handleExportTrie = useCallback(() => {\n    if (nodes.length > 0) {\n      exportToTrie({ nodes, edges, styles: nodeStyles }, 'argument-map.trie');\n    }\n  }, [nodes, edges, nodeStyles]);\n\n  // Import from a .trie file\n  const handleImportTrie = useCallback(async (event) => {\n    try {\n      const file = event.target.files[0];\n      const importedData = await importFromTrie(file);\n      \n      if (importedData && importedData.nodes && importedData.edges) {\n        setNodes(importedData.nodes);\n        setEdges(importedData.edges);\n      }\n    } catch (error) {\n      console.error('Error importing file:', error);\n      alert('Failed to import the file. Please ensure it is a valid .trie file.');\n    }\n  }, [setNodes, setEdges]);\n\n  // Update node positions after drag\n  const onNodeDragStop = useCallback((_, node) => {\n    setNodes((prevNodes) =>\n      prevNodes.map((n) => (n.id === node.id ? { ...n, position: node.position } : n))\n    );\n  }, [setNodes]);\n\n  const handleInit = (instance) => {\n    setReactFlowInstance(instance);\n    setTimeout(() => {\n      instance.fitView({ padding: 0.2 });\n    }, 100);\n  };\n\n  // Define the custom node type with direct access to the addNode function\n  const nodeTypes = {\n    custom: (props) => <CustomNode {...props} onAddChild={addNode} />\n  };\n\n  return (\n    <div className=\"argument-map-container\" style={{ height: 'calc(100vh - 200px)', width: '100%' }}>\n      <div className=\"argument-map-actions\" style={{ \n        display: 'flex', \n        gap: '10px',\n        position: 'absolute',\n        zIndex: 5,\n        top: '10px',\n        left: '10px',\n        background: 'rgba(255, 255, 255, 0.8)',\n        padding: '5px',\n        borderRadius: '4px'\n      }}>\n        <button \n          onClick={handleExportImage}\n          style={{\n            padding: '5px 10px',\n            fontSize: '12px',\n            backgroundColor: '#f0f0f0',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          }}\n        >Export as PNG</button>\n        <button \n          onClick={handleExportTrie}\n          style={{\n            padding: '5px 10px',\n            fontSize: '12px',\n            backgroundColor: '#f0f0f0',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          }}\n        >Export as .trie</button>\n        <label className=\"import-button\" style={{ \n          padding: '5px 10px', \n          fontSize: '12px',\n          backgroundColor: '#f0f0f0', \n          borderRadius: '4px', \n          cursor: 'pointer',\n          border: '1px solid #ccc',\n          margin: 0\n        }}>\n          Import .trie\n          <input \n            type=\"file\" \n            accept=\".trie\" \n            onChange={handleImportTrie} \n            style={{ display: 'none' }} \n          />\n        </label>\n      </div>\n\n      <div ref={reactFlowWrapper} style={{ height: '100%', width: '100%' }}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onInit={handleInit}\n          onNodeDragStop={onNodeDragStop}\n          nodeTypes={nodeTypes}\n          fitView\n          fitViewOptions={{ padding: 0.2 }}\n          minZoom={0.5}\n          maxZoom={2}\n          defaultViewport={{ x: 0, y: 0, zoom: 1 }}\n        >\n          <Controls position=\"bottom-right\" />\n          <Background color=\"#f8f8f8\" variant=\"dots\" />\n        </ReactFlow>\n      </div>\n    </div>\n  );\n};\n\nexport default ArgumentMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}