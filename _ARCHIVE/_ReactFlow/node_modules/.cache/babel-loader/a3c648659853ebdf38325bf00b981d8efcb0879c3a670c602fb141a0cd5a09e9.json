{"ast":null,"code":"var _jsxFileName = \"/Users/aeonitis/dev/wip/n/aeonitis.github.io/src/context/AppContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback, useContext } from 'react';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\n\n// Create a context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\n\n// Default node styles\nconst DEFAULT_NODE_STYLES = {\n  resolution: {\n    background: '#f0e6f6',\n    text: '#000000'\n  },\n  because: {\n    background: '#e6f6e6',\n    text: '#000000'\n  },\n  but: {\n    background: '#f6e6e6',\n    text: '#000000'\n  },\n  however: {\n    background: '#e6e6f6',\n    text: '#000000'\n  }\n};\n\n// AppContextProvider component\nexport const AppContextProvider = ({\n  children\n}) => {\n  _s();\n  // State for node styles\n  const [nodeStyles, setNodeStyles] = useLocalStorage('arg-map-node-styles', DEFAULT_NODE_STYLES);\n\n  // State for current map\n  const [currentMap, setCurrentMap] = useState({\n    nodes: [],\n    edges: []\n  });\n\n  // State for managing the initial resolution\n  const [resolution, setResolution] = useState('');\n\n  // State for prompting user about WIP on return\n  const [showWipPrompt, setShowWipPrompt] = useState(false);\n\n  // Check if there's a WIP state to restore on component mount\n  useEffect(() => {\n    const savedWip = localStorage.getItem('arg-map-wip');\n    if (savedWip) {\n      try {\n        const wipData = JSON.parse(savedWip);\n        if (wipData && wipData.nodes && wipData.nodes.length > 0) {\n          setShowWipPrompt(true);\n        }\n      } catch (error) {\n        console.error('Error parsing saved WIP state:', error);\n      }\n    }\n  }, []);\n\n  // Update node text\n  const updateNodeText = useCallback((nodeId, newText) => {\n    setCurrentMap(prevMap => {\n      const updatedNodes = prevMap.nodes.map(node => node.id === nodeId ? {\n        ...node,\n        data: {\n          ...node.data,\n          label: newText\n        }\n      } : node);\n      return {\n        ...prevMap,\n        nodes: updatedNodes\n      };\n    });\n  }, []);\n\n  // Update node style for a specific type\n  const updateNodeStyle = useCallback((nodeType, colors) => {\n    setNodeStyles(prevStyles => ({\n      ...prevStyles,\n      [nodeType]: colors\n    }));\n  }, [setNodeStyles]);\n\n  // Delete a node\n  const deleteNode = useCallback(nodeId => {\n    setCurrentMap(prevMap => {\n      // Find all child nodes that connect to this node\n      const childEdges = prevMap.edges.filter(edge => edge.source === nodeId);\n      const childNodeIds = childEdges.map(edge => edge.target);\n\n      // Recursively collect all descendants\n      const getAllDescendants = nodeIds => {\n        let descendants = [...nodeIds];\n        nodeIds.forEach(id => {\n          const childEdges = prevMap.edges.filter(edge => edge.source === id);\n          const childIds = childEdges.map(edge => edge.target);\n          if (childIds.length > 0) {\n            descendants = [...descendants, ...getAllDescendants(childIds)];\n          }\n        });\n        return descendants;\n      };\n      const descendantIds = getAllDescendants(childNodeIds);\n      const nodesToRemove = [nodeId, ...descendantIds];\n\n      // Filter out the node and all its descendants\n      const updatedNodes = prevMap.nodes.filter(node => !nodesToRemove.includes(node.id));\n\n      // Filter out any edges that involve the removed nodes\n      const updatedEdges = prevMap.edges.filter(edge => !nodesToRemove.includes(edge.source) && !nodesToRemove.includes(edge.target));\n      return {\n        nodes: updatedNodes,\n        edges: updatedEdges\n      };\n    });\n  }, []);\n\n  // Save current WIP state to localStorage\n  const saveWipState = useCallback(mapState => {\n    if (mapState && mapState.nodes && mapState.nodes.length > 0) {\n      localStorage.setItem('arg-map-wip', JSON.stringify(mapState));\n    }\n  }, []);\n\n  // Load WIP state from localStorage\n  const loadWipState = useCallback(() => {\n    const savedWip = localStorage.getItem('arg-map-wip');\n    if (savedWip) {\n      try {\n        return JSON.parse(savedWip);\n      } catch (error) {\n        console.error('Error parsing saved WIP state:', error);\n        return null;\n      }\n    }\n    return null;\n  }, []);\n\n  // Clear WIP state from localStorage\n  const clearWipState = useCallback(() => {\n    localStorage.removeItem('arg-map-wip');\n    setShowWipPrompt(false);\n  }, []);\n\n  // Handle continuing with WIP or starting fresh\n  const handleContinueWip = useCallback(() => {\n    setShowWipPrompt(false);\n    // The actual loading will happen in the ArgumentMap component\n  }, []);\n  const handleStartFresh = useCallback(() => {\n    clearWipState();\n    setCurrentMap({\n      nodes: [],\n      edges: []\n    });\n  }, [clearWipState]);\n\n  // Context value\n  const contextValue = {\n    // Node styles\n    nodeStyles,\n    updateNodeStyle,\n    resetNodeStyles: () => setNodeStyles(DEFAULT_NODE_STYLES),\n    // Current map\n    currentMap,\n    setCurrentMap,\n    updateNodeText,\n    deleteNode,\n    // Resolution\n    resolution,\n    setResolution,\n    // WIP state management\n    saveWipState,\n    loadWipState,\n    clearWipState,\n    showWipPrompt,\n    handleContinueWip,\n    handleStartFresh\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n\n// WIP Prompt Component\n_s(AppContextProvider, \"wvAcKct/nklXqz9yzCWUkje9g8E=\", false, function () {\n  return [useLocalStorage];\n});\n_c = AppContextProvider;\nexport const WipPrompt = () => {\n  _s2();\n  const {\n    showWipPrompt,\n    handleContinueWip,\n    handleStartFresh\n  } = useContext(AppContext);\n  if (!showWipPrompt) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wip-prompt\",\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      zIndex: 1000\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: 'white',\n        padding: '20px',\n        borderRadius: '8px',\n        maxWidth: '400px',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Continue Previous Work?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"We found a previously saved argument map. Would you like to continue working on it?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-around',\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleContinueWip,\n          style: {\n            padding: '8px 16px',\n            backgroundColor: '#1a73e8',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: \"Continue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStartFresh,\n          style: {\n            padding: '8px 16px',\n            backgroundColor: '#f0f0f0',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: \"Start Fresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s2(WipPrompt, \"eMHIirrkKZwk5zAfRwCSYO1uE8E=\");\n_c2 = WipPrompt;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContextProvider\");\n$RefreshReg$(_c2, \"WipPrompt\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","useContext","useLocalStorage","jsxDEV","_jsxDEV","AppContext","DEFAULT_NODE_STYLES","resolution","background","text","because","but","however","AppContextProvider","children","_s","nodeStyles","setNodeStyles","currentMap","setCurrentMap","nodes","edges","setResolution","showWipPrompt","setShowWipPrompt","savedWip","localStorage","getItem","wipData","JSON","parse","length","error","console","updateNodeText","nodeId","newText","prevMap","updatedNodes","map","node","id","data","label","updateNodeStyle","nodeType","colors","prevStyles","deleteNode","childEdges","filter","edge","source","childNodeIds","target","getAllDescendants","nodeIds","descendants","forEach","childIds","descendantIds","nodesToRemove","includes","updatedEdges","saveWipState","mapState","setItem","stringify","loadWipState","clearWipState","removeItem","handleContinueWip","handleStartFresh","contextValue","resetNodeStyles","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","WipPrompt","_s2","className","style","position","top","left","right","bottom","backgroundColor","display","justifyContent","alignItems","zIndex","padding","borderRadius","maxWidth","textAlign","marginTop","onClick","color","border","cursor","_c2","$RefreshReg$"],"sources":["/Users/aeonitis/dev/wip/n/aeonitis.github.io/src/context/AppContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback, useContext } from 'react';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\n\n// Create a context\nexport const AppContext = createContext();\n\n// Default node styles\nconst DEFAULT_NODE_STYLES = {\n  resolution: { background: '#f0e6f6', text: '#000000' },\n  because: { background: '#e6f6e6', text: '#000000' },\n  but: { background: '#f6e6e6', text: '#000000' },\n  however: { background: '#e6e6f6', text: '#000000' }\n};\n\n// AppContextProvider component\nexport const AppContextProvider = ({ children }) => {\n  // State for node styles\n  const [nodeStyles, setNodeStyles] = useLocalStorage('arg-map-node-styles', DEFAULT_NODE_STYLES);\n  \n  // State for current map\n  const [currentMap, setCurrentMap] = useState({ nodes: [], edges: [] });\n  \n  // State for managing the initial resolution\n  const [resolution, setResolution] = useState('');\n  \n  // State for prompting user about WIP on return\n  const [showWipPrompt, setShowWipPrompt] = useState(false);\n  \n  // Check if there's a WIP state to restore on component mount\n  useEffect(() => {\n    const savedWip = localStorage.getItem('arg-map-wip');\n    if (savedWip) {\n      try {\n        const wipData = JSON.parse(savedWip);\n        if (wipData && wipData.nodes && wipData.nodes.length > 0) {\n          setShowWipPrompt(true);\n        }\n      } catch (error) {\n        console.error('Error parsing saved WIP state:', error);\n      }\n    }\n  }, []);\n\n  // Update node text\n  const updateNodeText = useCallback((nodeId, newText) => {\n    setCurrentMap(prevMap => {\n      const updatedNodes = prevMap.nodes.map(node => \n        node.id === nodeId \n          ? { ...node, data: { ...node.data, label: newText } } \n          : node\n      );\n      return { ...prevMap, nodes: updatedNodes };\n    });\n  }, []);\n\n  // Update node style for a specific type\n  const updateNodeStyle = useCallback((nodeType, colors) => {\n    setNodeStyles(prevStyles => ({\n      ...prevStyles,\n      [nodeType]: colors\n    }));\n  }, [setNodeStyles]);\n\n  // Delete a node\n  const deleteNode = useCallback((nodeId) => {\n    setCurrentMap(prevMap => {\n      // Find all child nodes that connect to this node\n      const childEdges = prevMap.edges.filter(edge => edge.source === nodeId);\n      const childNodeIds = childEdges.map(edge => edge.target);\n      \n      // Recursively collect all descendants\n      const getAllDescendants = (nodeIds) => {\n        let descendants = [...nodeIds];\n        \n        nodeIds.forEach(id => {\n          const childEdges = prevMap.edges.filter(edge => edge.source === id);\n          const childIds = childEdges.map(edge => edge.target);\n          \n          if (childIds.length > 0) {\n            descendants = [...descendants, ...getAllDescendants(childIds)];\n          }\n        });\n        \n        return descendants;\n      };\n      \n      const descendantIds = getAllDescendants(childNodeIds);\n      const nodesToRemove = [nodeId, ...descendantIds];\n      \n      // Filter out the node and all its descendants\n      const updatedNodes = prevMap.nodes.filter(node => !nodesToRemove.includes(node.id));\n      \n      // Filter out any edges that involve the removed nodes\n      const updatedEdges = prevMap.edges.filter(\n        edge => !nodesToRemove.includes(edge.source) && !nodesToRemove.includes(edge.target)\n      );\n      \n      return {\n        nodes: updatedNodes,\n        edges: updatedEdges\n      };\n    });\n  }, []);\n\n  // Save current WIP state to localStorage\n  const saveWipState = useCallback((mapState) => {\n    if (mapState && mapState.nodes && mapState.nodes.length > 0) {\n      localStorage.setItem('arg-map-wip', JSON.stringify(mapState));\n    }\n  }, []);\n\n  // Load WIP state from localStorage\n  const loadWipState = useCallback(() => {\n    const savedWip = localStorage.getItem('arg-map-wip');\n    if (savedWip) {\n      try {\n        return JSON.parse(savedWip);\n      } catch (error) {\n        console.error('Error parsing saved WIP state:', error);\n        return null;\n      }\n    }\n    return null;\n  }, []);\n\n  // Clear WIP state from localStorage\n  const clearWipState = useCallback(() => {\n    localStorage.removeItem('arg-map-wip');\n    setShowWipPrompt(false);\n  }, []);\n\n  // Handle continuing with WIP or starting fresh\n  const handleContinueWip = useCallback(() => {\n    setShowWipPrompt(false);\n    // The actual loading will happen in the ArgumentMap component\n  }, []);\n\n  const handleStartFresh = useCallback(() => {\n    clearWipState();\n    setCurrentMap({ nodes: [], edges: [] });\n  }, [clearWipState]);\n\n  // Context value\n  const contextValue = {\n    // Node styles\n    nodeStyles,\n    updateNodeStyle,\n    resetNodeStyles: () => setNodeStyles(DEFAULT_NODE_STYLES),\n    \n    // Current map\n    currentMap,\n    setCurrentMap,\n    updateNodeText,\n    deleteNode,\n    \n    // Resolution\n    resolution,\n    setResolution,\n    \n    // WIP state management\n    saveWipState,\n    loadWipState,\n    clearWipState,\n    showWipPrompt,\n    handleContinueWip,\n    handleStartFresh\n  };\n\n  return (\n    <AppContext.Provider value={contextValue}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// WIP Prompt Component\nexport const WipPrompt = () => {\n  const { showWipPrompt, handleContinueWip, handleStartFresh } = useContext(AppContext);\n\n  if (!showWipPrompt) return null;\n\n  return (\n    <div className=\"wip-prompt\" style={{\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      zIndex: 1000\n    }}>\n      <div style={{\n        backgroundColor: 'white',\n        padding: '20px',\n        borderRadius: '8px',\n        maxWidth: '400px',\n        textAlign: 'center'\n      }}>\n        <h3>Continue Previous Work?</h3>\n        <p>We found a previously saved argument map. Would you like to continue working on it?</p>\n        <div style={{ display: 'flex', justifyContent: 'space-around', marginTop: '20px' }}>\n          <button \n            onClick={handleContinueWip}\n            style={{\n              padding: '8px 16px',\n              backgroundColor: '#1a73e8',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            }}\n          >\n            Continue\n          </button>\n          <button \n            onClick={handleStartFresh}\n            style={{\n              padding: '8px 16px',\n              backgroundColor: '#f0f0f0',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            }}\n          >\n            Start Fresh\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,OAAO;AAC1F,SAASC,eAAe,QAAQ,0BAA0B;;AAE1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,UAAU,gBAAGR,aAAa,CAAC,CAAC;;AAEzC;AACA,MAAMS,mBAAmB,GAAG;EAC1BC,UAAU,EAAE;IAAEC,UAAU,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAU,CAAC;EACtDC,OAAO,EAAE;IAAEF,UAAU,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAU,CAAC;EACnDE,GAAG,EAAE;IAAEH,UAAU,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAU,CAAC;EAC/CG,OAAO,EAAE;IAAEJ,UAAU,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAU;AACpD,CAAC;;AAED;AACA,OAAO,MAAMI,kBAAkB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClD;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGf,eAAe,CAAC,qBAAqB,EAAEI,mBAAmB,CAAC;;EAE/F;EACA,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGrB,QAAQ,CAAC;IAAEsB,KAAK,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC;;EAEtE;EACA,MAAM,CAACd,UAAU,EAAEe,aAAa,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAM,CAACyB,aAAa,EAAEC,gBAAgB,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;;EAEzD;EACAC,SAAS,CAAC,MAAM;IACd,MAAM0B,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACpD,IAAIF,QAAQ,EAAE;MACZ,IAAI;QACF,MAAMG,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC;QACpC,IAAIG,OAAO,IAAIA,OAAO,CAACR,KAAK,IAAIQ,OAAO,CAACR,KAAK,CAACW,MAAM,GAAG,CAAC,EAAE;UACxDP,gBAAgB,CAAC,IAAI,CAAC;QACxB;MACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,cAAc,GAAGlC,WAAW,CAAC,CAACmC,MAAM,EAAEC,OAAO,KAAK;IACtDjB,aAAa,CAACkB,OAAO,IAAI;MACvB,MAAMC,YAAY,GAAGD,OAAO,CAACjB,KAAK,CAACmB,GAAG,CAACC,IAAI,IACzCA,IAAI,CAACC,EAAE,KAAKN,MAAM,GACd;QAAE,GAAGK,IAAI;QAAEE,IAAI,EAAE;UAAE,GAAGF,IAAI,CAACE,IAAI;UAAEC,KAAK,EAAEP;QAAQ;MAAE,CAAC,GACnDI,IACN,CAAC;MACD,OAAO;QAAE,GAAGH,OAAO;QAAEjB,KAAK,EAAEkB;MAAa,CAAC;IAC5C,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,eAAe,GAAG5C,WAAW,CAAC,CAAC6C,QAAQ,EAAEC,MAAM,KAAK;IACxD7B,aAAa,CAAC8B,UAAU,KAAK;MAC3B,GAAGA,UAAU;MACb,CAACF,QAAQ,GAAGC;IACd,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAAC7B,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAM+B,UAAU,GAAGhD,WAAW,CAAEmC,MAAM,IAAK;IACzChB,aAAa,CAACkB,OAAO,IAAI;MACvB;MACA,MAAMY,UAAU,GAAGZ,OAAO,CAAChB,KAAK,CAAC6B,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAKjB,MAAM,CAAC;MACvE,MAAMkB,YAAY,GAAGJ,UAAU,CAACV,GAAG,CAACY,IAAI,IAAIA,IAAI,CAACG,MAAM,CAAC;;MAExD;MACA,MAAMC,iBAAiB,GAAIC,OAAO,IAAK;QACrC,IAAIC,WAAW,GAAG,CAAC,GAAGD,OAAO,CAAC;QAE9BA,OAAO,CAACE,OAAO,CAACjB,EAAE,IAAI;UACpB,MAAMQ,UAAU,GAAGZ,OAAO,CAAChB,KAAK,CAAC6B,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAKX,EAAE,CAAC;UACnE,MAAMkB,QAAQ,GAAGV,UAAU,CAACV,GAAG,CAACY,IAAI,IAAIA,IAAI,CAACG,MAAM,CAAC;UAEpD,IAAIK,QAAQ,CAAC5B,MAAM,GAAG,CAAC,EAAE;YACvB0B,WAAW,GAAG,CAAC,GAAGA,WAAW,EAAE,GAAGF,iBAAiB,CAACI,QAAQ,CAAC,CAAC;UAChE;QACF,CAAC,CAAC;QAEF,OAAOF,WAAW;MACpB,CAAC;MAED,MAAMG,aAAa,GAAGL,iBAAiB,CAACF,YAAY,CAAC;MACrD,MAAMQ,aAAa,GAAG,CAAC1B,MAAM,EAAE,GAAGyB,aAAa,CAAC;;MAEhD;MACA,MAAMtB,YAAY,GAAGD,OAAO,CAACjB,KAAK,CAAC8B,MAAM,CAACV,IAAI,IAAI,CAACqB,aAAa,CAACC,QAAQ,CAACtB,IAAI,CAACC,EAAE,CAAC,CAAC;;MAEnF;MACA,MAAMsB,YAAY,GAAG1B,OAAO,CAAChB,KAAK,CAAC6B,MAAM,CACvCC,IAAI,IAAI,CAACU,aAAa,CAACC,QAAQ,CAACX,IAAI,CAACC,MAAM,CAAC,IAAI,CAACS,aAAa,CAACC,QAAQ,CAACX,IAAI,CAACG,MAAM,CACrF,CAAC;MAED,OAAO;QACLlC,KAAK,EAAEkB,YAAY;QACnBjB,KAAK,EAAE0C;MACT,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,YAAY,GAAGhE,WAAW,CAAEiE,QAAQ,IAAK;IAC7C,IAAIA,QAAQ,IAAIA,QAAQ,CAAC7C,KAAK,IAAI6C,QAAQ,CAAC7C,KAAK,CAACW,MAAM,GAAG,CAAC,EAAE;MAC3DL,YAAY,CAACwC,OAAO,CAAC,aAAa,EAAErC,IAAI,CAACsC,SAAS,CAACF,QAAQ,CAAC,CAAC;IAC/D;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,YAAY,GAAGpE,WAAW,CAAC,MAAM;IACrC,MAAMyB,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACpD,IAAIF,QAAQ,EAAE;MACZ,IAAI;QACF,OAAOI,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC;MAC7B,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtD,OAAO,IAAI;MACb;IACF;IACA,OAAO,IAAI;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMqC,aAAa,GAAGrE,WAAW,CAAC,MAAM;IACtC0B,YAAY,CAAC4C,UAAU,CAAC,aAAa,CAAC;IACtC9C,gBAAgB,CAAC,KAAK,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM+C,iBAAiB,GAAGvE,WAAW,CAAC,MAAM;IAC1CwB,gBAAgB,CAAC,KAAK,CAAC;IACvB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMgD,gBAAgB,GAAGxE,WAAW,CAAC,MAAM;IACzCqE,aAAa,CAAC,CAAC;IACflD,aAAa,CAAC;MAAEC,KAAK,EAAE,EAAE;MAAEC,KAAK,EAAE;IAAG,CAAC,CAAC;EACzC,CAAC,EAAE,CAACgD,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAMI,YAAY,GAAG;IACnB;IACAzD,UAAU;IACV4B,eAAe;IACf8B,eAAe,EAAEA,CAAA,KAAMzD,aAAa,CAACX,mBAAmB,CAAC;IAEzD;IACAY,UAAU;IACVC,aAAa;IACbe,cAAc;IACdc,UAAU;IAEV;IACAzC,UAAU;IACVe,aAAa;IAEb;IACA0C,YAAY;IACZI,YAAY;IACZC,aAAa;IACb9C,aAAa;IACbgD,iBAAiB;IACjBC;EACF,CAAC;EAED,oBACEpE,OAAA,CAACC,UAAU,CAACsE,QAAQ;IAACC,KAAK,EAAEH,YAAa;IAAA3D,QAAA,EACtCA;EAAQ;IAAA+D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAE1B,CAAC;;AAED;AAAAjE,EAAA,CAhKaF,kBAAkB;EAAA,QAEOX,eAAe;AAAA;AAAA+E,EAAA,GAFxCpE,kBAAkB;AAiK/B,OAAO,MAAMqE,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC7B,MAAM;IAAE5D,aAAa;IAAEgD,iBAAiB;IAAEC;EAAiB,CAAC,GAAGvE,UAAU,CAACI,UAAU,CAAC;EAErF,IAAI,CAACkB,aAAa,EAAE,OAAO,IAAI;EAE/B,oBACEnB,OAAA;IAAKgF,SAAS,EAAC,YAAY;IAACC,KAAK,EAAE;MACjCC,QAAQ,EAAE,OAAO;MACjBC,GAAG,EAAE,CAAC;MACNC,IAAI,EAAE,CAAC;MACPC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE,CAAC;MACTC,eAAe,EAAE,oBAAoB;MACrCC,OAAO,EAAE,MAAM;MACfC,cAAc,EAAE,QAAQ;MACxBC,UAAU,EAAE,QAAQ;MACpBC,MAAM,EAAE;IACV,CAAE;IAAAjF,QAAA,eACAV,OAAA;MAAKiF,KAAK,EAAE;QACVM,eAAe,EAAE,OAAO;QACxBK,OAAO,EAAE,MAAM;QACfC,YAAY,EAAE,KAAK;QACnBC,QAAQ,EAAE,OAAO;QACjBC,SAAS,EAAE;MACb,CAAE;MAAArF,QAAA,gBACAV,OAAA;QAAAU,QAAA,EAAI;MAAuB;QAAA+D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChC5E,OAAA;QAAAU,QAAA,EAAG;MAAmF;QAAA+D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC1F5E,OAAA;QAAKiF,KAAK,EAAE;UAAEO,OAAO,EAAE,MAAM;UAAEC,cAAc,EAAE,cAAc;UAAEO,SAAS,EAAE;QAAO,CAAE;QAAAtF,QAAA,gBACjFV,OAAA;UACEiG,OAAO,EAAE9B,iBAAkB;UAC3Bc,KAAK,EAAE;YACLW,OAAO,EAAE,UAAU;YACnBL,eAAe,EAAE,SAAS;YAC1BW,KAAK,EAAE,OAAO;YACdC,MAAM,EAAE,MAAM;YACdN,YAAY,EAAE,KAAK;YACnBO,MAAM,EAAE;UACV,CAAE;UAAA1F,QAAA,EACH;QAED;UAAA+D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT5E,OAAA;UACEiG,OAAO,EAAE7B,gBAAiB;UAC1Ba,KAAK,EAAE;YACLW,OAAO,EAAE,UAAU;YACnBL,eAAe,EAAE,SAAS;YAC1BY,MAAM,EAAE,gBAAgB;YACxBN,YAAY,EAAE,KAAK;YACnBO,MAAM,EAAE;UACV,CAAE;UAAA1F,QAAA,EACH;QAED;UAAA+D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACG,GAAA,CAzDWD,SAAS;AAAAuB,GAAA,GAATvB,SAAS;AAAA,IAAAD,EAAA,EAAAwB,GAAA;AAAAC,YAAA,CAAAzB,EAAA;AAAAyB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}